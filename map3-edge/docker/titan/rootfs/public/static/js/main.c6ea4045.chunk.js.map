{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","viewport","latitude","longitude","zoom","width","height","style","nodeIp","contact","open","committing","nodeInfo","undefined","_onViewportChange","_this","setState","_updateCurrentLocation","navigator","geolocation","getCurrentPosition","position","Object","objectSpread","coords","console","log","error","warn","handleClickOpen","handleClose","handleSubmit","e","preventDefault","fetch","method","headers","Headers","Content-Type","body","concat","nodePublicIp","then","res","json","onContactInputChange","event","target","value","contactError","_this2","this","data","res2","sources","composite","tiles","push","tileServer","catch","_this3","_this$state","react_default","a","createElement","className","esm","assign","ref","map","mapRef","mapStyle","onViewportChange","mapOptions","localIdeographFontFamily","attributionControl","mapboxApiAccessToken","paddingLeft","flex","href","rel","Dashboard_default","marginLeft","Paper_default","elevation","square","Typography_default","Fab_default","color","size","Dialog_default","onClose","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","lib","onSubmit","onError","errors","DialogTitle_default","id","DialogContent_default","DialogContentText_default","autoFocus","margin","name","label","fullWidth","validators","errorMessages","onChange","disabled","DialogActions_default","Button_default","onClick","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"geA0NeA,6MArMbC,MAAQ,CACNC,SAAU,CACRC,SAAU,SACVC,UAAW,WACXC,KAAM,GACNC,MAAO,QACPC,OAAQ,SAEVC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,MAAM,EACNC,YAAY,KAGdC,cAAWC,IAwCXC,kBAAoB,SAAAb,GAClBA,EAAQ,MAAY,QACpBA,EAAQ,OAAa,QACrBc,EAAKC,SAAS,CAACf,gBAGjBgB,uBAAyB,WACvBC,UAAUC,YAAYC,mBAAmB,SAAAC,GACvC,IAAMpB,EAAQqB,OAAAC,EAAA,EAAAD,CAAA,GAAOP,EAAKf,MAAMC,UAChCA,EAASE,UAAYkB,EAASG,OAAOrB,UACrCF,EAASC,SAAWmB,EAASG,OAAOtB,SACpCa,EAAKC,SAAS,CAACf,aACfwB,QAAQC,IAAI,eAAgBL,IAC3B,SAACM,GACFF,QAAQG,KAAKD,QAIjBE,gBAAkB,WAChBd,EAAKC,SAAS,CAACN,MAAM,OAGvBoB,YAAc,WACZf,EAAKC,SAAS,CAACN,MAAM,OAGvBqB,aAAe,SAACC,GACdA,EAAEC,iBACElB,EAAKH,WACPa,QAAQC,IAAI,QAASX,EAAKf,MAAMS,SAChCM,EAAKC,SAAS,CAACL,YAAY,IAC3BuB,MAAM,6CAA8C,CAClDC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACnBC,eAAgB,sCAElBC,KAAI,MAAAC,OAAQzB,EAAKH,SAAS6B,aAAtB,aAAAD,OAA8CzB,EAAKf,MAAMS,WAE5DiC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJ5B,EAAKC,SAAS,CAACL,YAAY,EAAOD,MAAM,IACxCe,QAAQC,IAAIiB,SAKpBE,qBAAuB,SAACC,GACtB/B,EAAKC,SAAS,CAACP,QAASqC,EAAMC,OAAOC,MAAOC,cAAc,yFArFvC,IAAAC,EAAAC,KACnBjB,MAvBkB,kBAwBfQ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAA9B,GAaJ,OAZAsC,EAAKtC,SAAWA,EAChBsC,EAAKlC,SAAS,CAACR,OAAQI,EAAS6B,eAEhCP,MAAK,uDAAAM,OAAwD5B,EAAS6B,eACnEC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAU,GACJ3B,QAAQC,IAAI0B,IACM,IAAdA,EAAKA,MACPF,EAAKlC,SAAS,CAACN,MAAM,MAIpBwB,MAvCO,qBAwCXQ,KAAK,SAAAW,GAAI,OAAIA,EAAKT,SAClBF,KAAK,SAAAnC,GAEJ,OADAA,EAAM+C,QAAQC,UAAUC,MAAMC,KAAK7C,EAAS8C,YACrCnD,MAGZmC,KAAK,SAAAnC,GACJ2C,EAAKlC,SAAS,CAACT,YAEhBoD,MAAM,SAAA3B,GACLP,QAAQG,KAAKI,iDAKjBmB,KAAKlC,0DAwDE,IAAA2C,EAAAT,KAAAU,EAC2BV,KAAKnD,MAAhCC,EADA4D,EACA5D,SAAUM,EADVsD,EACUtD,MAAOC,EADjBqD,EACiBrD,OAExB,OACEsD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD5C,OAAA6C,OAAA,CACEC,IAAK,SAAAC,GAAG,OAAIT,EAAKU,OAASD,IACtBpE,EAFN,CAGEsE,SAAUhE,EACViE,iBAAkBrB,KAAKrC,kBACvB2D,WAAY,CACVC,yBAA0B,8CAC1BC,oBAAoB,GAEtBC,qBA3HW,oGA8Hbd,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,OAAKzD,MAAO,CAACsE,YAAa,QAA1B,SAAyCrE,GACzCsD,EAAAC,EAAAC,cAAA,OAAKzD,MAAO,CAACuE,KAAM,KACnBhB,EAAAC,EAAAC,cAAA,KAAGe,KAAI,UAAAvC,OAAYhC,EAAZ,SAA2BwE,IAAI,sBAAsBjC,OAAO,SAChEkB,UAAU,aACXH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,kBACAD,EAAAC,EAAAC,cAAA,OAAKzD,MAAO,CAAC2E,WAAY,QAAzB,eAGJpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAOqB,UAAW,EAAGnB,UAAU,YAAYoB,QAAM,GAC/CvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,4IAIFD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAKgB,KA9IG,0BA8IgBhC,OAAO,SAASiC,IAAI,sBAAsBQ,MAAO,YACpEC,KAAK,SADV,UAMF3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CACErD,KAAMyC,KAAKnD,MAAMU,KACjBiF,QAASxC,KAAKrB,YACd8D,sBAAoB,EACpBC,sBAAoB,EACpBC,kBAAgB,qBAEhBhC,EAAAC,EAAAC,cAAC+B,EAAA,cAAD,CAAeC,SAAU7C,KAAKpB,aAAckE,QAAS,SAAAC,GAAM,OAAIzE,QAAQG,KAAKsE,KAC1EpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAaqC,GAAG,qBAAhB,cACAtC,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,KACED,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,8LAKAD,EAAAC,EAAAC,cAAC+B,EAAA,cAAD,CACEQ,WAAS,EACTC,OAAO,QACPJ,GAAG,OACHK,KAAK,UACLzD,MAAOG,KAAKnD,MAAMS,QAClBiG,MAAM,wBACNC,WAAS,EACTC,WAAY,CAAC,YACbC,cAAe,CAAC,4BAChBC,SAAU3D,KAAKN,qBACfkE,SAAU5D,KAAKnD,MAAMW,aAGvBmD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGe,KAlLD,0BAkLoBhC,OAAO,SAASiC,IAAI,uBAA1C,8CAMJlB,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,KACED,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CAAQmD,QAAS/D,KAAKrB,YAAa0D,MAAM,UAAUuB,SAAU5D,KAAKnD,MAAMW,YAAxE,UAGAmD,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CAAQoD,KAAK,SAASJ,SAAU5D,KAAKnD,MAAMW,WAAY6E,MAAM,WAA7D,sBA1LE4B,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmB5G,WACrBA,UAAU6G,cAAcC,MAAMtF,KAAK,SAAAuF,GACjCA,EAAaC","file":"static/js/main.c6ea4045.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport MapGL from 'react-map-gl';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Dashboard from '@material-ui/icons/Dashboard';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\n\nconst MAP_STYLE_URL = 'styles/basic.json'\nconst NODE_INFO_URL = 'node-info.json'\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiaHlwZXJpb25sYWIiLCJhIjoiY2pwYXNvbTJiMm90ZjNxcDd3Y3kxNGtmYiJ9.s-np__x-B_MgHvp06NxV5w'\nconst DISCUSS_URL = 'https://talk.hyn.space/'\n\nclass App extends Component {\n  state = {\n    viewport: {\n      latitude: 22.305110,\n      longitude: 114.188488,\n      zoom: 10,\n      width: \"100vw\",\n      height: \"100vh\",\n    },\n    style: '',\n    nodeIp: '',\n    contact: '',\n    open: false,\n    committing: false\n  }\n\n  nodeInfo = undefined\n\n  componentWillMount() {\n    fetch(NODE_INFO_URL)\n      .then(res => res.json())\n      .then(nodeInfo => {\n        this.nodeInfo = nodeInfo\n        this.setState({nodeIp: nodeInfo.nodePublicIp})\n\n        fetch(`https://api.hyn.space/api/v1/tile/feedback/check?ip=${nodeInfo.nodePublicIp}`)\n          .then(res => res.json())\n          .then(data => {\n            console.log(data)\n            if (data.data === false) {\n              this.setState({open: true})\n            }\n          })\n\n        return fetch(MAP_STYLE_URL)\n          .then(res2 => res2.json())\n          .then(style => {\n            style.sources.composite.tiles.push(nodeInfo.tileServer)\n            return style\n          })\n      })\n      .then(style => {\n        this.setState({style})\n      })\n      .catch(e => {\n        console.warn(e)\n      })\n  }\n\n  componentDidMount() {\n    this._updateCurrentLocation()\n    // setTimeout(() => {\n    //   console.log(this.mapRef.getMap())\n    // }, 2000)\n  }\n\n  _onViewportChange = viewport => {\n    viewport['width'] = \"100vw\"\n    viewport['height'] = \"100vh\"\n    this.setState({viewport})\n  }\n\n  _updateCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const viewport = {...this.state.viewport}\n      viewport.longitude = position.coords.longitude\n      viewport.latitude = position.coords.latitude\n      this.setState({viewport})\n      console.log('get location', position)\n    }, (error) => {\n      console.warn(error)\n    })\n  }\n\n  handleClickOpen = () => {\n    this.setState({open: true});\n  };\n\n  handleClose = () => {\n    this.setState({open: false});\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    if (this.nodeInfo) {\n      console.log('email', this.state.contact)\n      this.setState({committing: true})\n      fetch(\"https://api.hyn.space/api/v1/tile/feedback\", {\n        method: 'POST',\n        headers: new Headers({\n          'Content-Type': 'application/x-www-form-urlencoded', // <-- Specifying the Content-Type\n        }),\n        body: `ip=${this.nodeInfo.nodePublicIp}&contact=${this.state.contact}` // <-- Post parameters\n      })\n        .then(res => res.json())\n        .then(res => {\n          this.setState({committing: false, open: false})\n          console.log(res)\n        })\n    }\n  }\n\n  onContactInputChange = (event) => {\n    this.setState({contact: event.target.value, contactError: false})\n  }\n\n  render() {\n    const {viewport, style, nodeIp} = this.state\n\n    return (\n      <div className=\"App\">\n        <MapGL\n          ref={map => this.mapRef = map}\n          {...viewport}\n          mapStyle={style}\n          onViewportChange={this._onViewportChange}\n          mapOptions={{\n            localIdeographFontFamily: \"'Noto Sans', 'Noto Sans CJK SC', sans-serif\",\n            attributionControl: false\n          }}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        >\n        </MapGL>\n        <div className={'App-Container'}>\n          <div className=\"App-Top-Nav\">\n            <span className=\"circle\"/>\n            <div style={{paddingLeft: '8px'}}>node: {nodeIp}</div>\n            <div style={{flex: 1}}/>\n            <a href={`http://${nodeIp}:3000`} rel=\"noopener noreferrer\" target='_blank'\n               className='dashboard'>\n              <Dashboard>Dashboard</Dashboard>\n              <div style={{marginLeft: '8px'}}>DASHBOARD</div>\n            </a>\n          </div>\n          <Paper elevation={1} className=\"App-Guide\" square>\n            <Typography>Tips: This map is to test if your service node works normally. If you see\n              this map, it means your node is providing map services. </Typography>\n          </Paper>\n\n          <div className=\"fab-help\">\n            <Fab href={DISCUSS_URL} target=\"_blank\" rel=\"noopener noreferrer\" color={'secondary'}\n                 size=\"large\">\n              Forum\n            </Fab>\n          </div>\n\n          <Dialog\n            open={this.state.open}\n            onClose={this.handleClose}\n            disableBackdropClick\n            disableEscapeKeyDown\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <ValidatorForm onSubmit={this.handleSubmit} onError={errors => console.warn(errors)}>\n              <DialogTitle id=\"form-dialog-title\">Support Us</DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  Dear friend, welcome to join Hyperion Map3 network, and become an important member\n                  of Hyperion community. Please leave your contact information below to help us\n                  improve our service.\n                </DialogContentText>\n                <TextValidator\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"name\"\n                  name=\"contact\"\n                  value={this.state.contact}\n                  label=\"Email or Phone Number\"\n                  fullWidth\n                  validators={['required']}\n                  errorMessages={['* this field is required']}\n                  onChange={this.onContactInputChange}\n                  disabled={this.state.committing}\n                />\n\n                <div className=\"link-discuss\">\n                  <a href={DISCUSS_URL} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Come share your ideas in Hyperion Forum!\n                  </a>\n                </div>\n\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\" disabled={this.state.committing}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={this.state.committing} color=\"primary\">\n                  Submit\n                </Button>\n              </DialogActions>\n            </ValidatorForm>\n          </Dialog>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}