{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "Create Map3 edge node ECS instance",
  "Parameters": {
    "ImageId": {
      "Type": "String",
      "Description": "ECS Image",
      "Label": "ECS Image",
      "Default": "ubuntu_16"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "ECS Instance Type",
      "Default": "ecs.t5-lc1m1.small",
      "AllowedValues": [
        "ecs.t5-lc1m1.small",
        "ecs.t5-lc1m2.small",
        "ecs.xn4.small",
        "ecs.n4.small",
        "ecs.mn4.small"
      ],
      "Label": "ECS Instance Type"
    },
    "InstanceLoginPassword": {
      "NoEcho": true,
      "Type": "String",
      "Description": "ECS Instance Login Password, 8 to 21 characters of alphanumeric characters",
      "ConstraintDescription": "Consist of 8 to 21 characters of alphanumeric characters",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "MaxLength": 21,
      "Confirm": true
    }
  },
  "Resources": {
    "Map3EdgeNodeVSwitch": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "VpcId": {
          "Ref": "Map3EdgeNodeVPC"
        },
        "ZoneId": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "ALIYUN::Region"
              }
            }
          ]
        },
        "CidrBlock": "192.168.0.0/16"
      }
    },
    "Map3EdgeNode": {
      "Type": "ALIYUN::ECS::Instance",
      "Properties": {
        "PrivateIpAddress": "192.168.0.1",
        "VpcId": {
          "Ref": "Map3EdgeNodeVPC"
        },
        "SecurityGroupId": {
          "Ref": "Map3EdgeNodeSG"
        },
        "VSwitchId": {
          "Ref": "Map3EdgeNodeVSwitch"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "AllocatePublicIP": true,
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SystemDiskCategory": "cloud_ssd",
        "Password": {
          "Ref": "InstanceLoginPassword"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": ["InstallConditionHandle", "CurlCli"]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash \n",
                  "cd /root \n",
                  "apt-get -y update >> /tmp/log.txt \n",
                  "echo \"install software\" >> /tmp/log.txt \n",
                  "apt-get -y install apt-transport-https ca-certificates curl software-properties-common git unzip >> /tmp/log.txt \n",
                  "echo \"add docker key and repository\" >> /tmp/log.txt \n",
                  "curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add - \n",
                  "apt-key fingerprint 0EBFCD88 >> /tmp/log.txt \n",
                  "add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" \n",
                  "apt-get update -y >> /tmp/log.txt \n",
                  "echo \"install docker\" >> /tmp/log.txt \n",
                  "apt-get -y install docker-ce >> /tmp/log.txt \n",
                  "echo \"install docker-compose\" >> /tmp/log.txt \n",
                  "curl -L http://map3.oss-cn-hongkong.aliyuncs.com/docker-compose -o /usr/local/bin/docker-compose \n",
                  "chmod +x /usr/local/bin/docker-compose \n",
                  "echo \"modify docker image repository\" >> /tmp/log.txt \n",
                  "mkdir -p /etc/docker \n",
                  "curl -L http://map3.oss-cn-hongkong.aliyuncs.com/docker_daemon.json -o /etc/docker/daemon.json \n",
                  "systemctl daemon-reload >> /tmp/log.txt \n",
                  "systemctl restart docker >> /tmp/log.txt \n",
                  "cd /opt \n",
                  "echo \"get map3-edge code\" >> /tmp/log.txt \n",
                  "wget http://map3.oss-cn-hongkong.aliyuncs.com/map3-edge.zip \n",
                  "unzip map3-edge.zip \n",
                  "cd /opt/map3-edge \n",
                  "echo \"repace filebeat docker image repo\" >> /tmp/log.txt \n",
                  "chmod +x path_aliyun.sh \n",
                  "./path_aliyun.sh \n",
                  "echo \"do docker-compose up\" >> /tmp/log.txt \n",
                  "docker-compose up -d >> /tmp/log.txt \n",
                  "echo \"do auto start process\" >> /tmp/log.txt \n",
                  "echo \"#!/usr/bin/env bash\" > /opt/start_map3.sh \n",
                  "echo \"cd /opt/map3-edge/\" >> /opt/start_map3.sh \n",
                  "echo \"docker-composer down && docker-composer up -d\" >> /opt/start_map3.sh \n",
                  "chmod +x /opt/start_map3.sh \n",
                  "echo \"#!/bin/sh -e\" > /etc/rc.local \n",
                  "echo \"/opt/start_map3.sh\" >> /etc/rc.local \n",
                  "echo \"exit 0\" >> /etc/rc.local \n",
                  "echo \"finish, do ros-notify\" >> /tmp/log.txt \n",
                  "ros-notify -d '{\"data\" : \"Install docker ce, checkout docker-map3 code and run map3 edge node.\"}'\n"
                ]
              ]
            }
          ]
        }
      }
    },
    "Map3EdgeNodeSG": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Map3EdgeNodeVPC"
        },
        "SecurityGroupName": "map3-edge-node-SG",
        "SecurityGroupIngress": [
          {
            "PortRange": "-1/-1",
            "Priority": 1,
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "all",
            "NicType": "intranet"
          }
        ],
        "SecurityGroupEgress": [
          {
            "PortRange": "-1/-1",
            "Priority": 1,
            "IpProtocol": "all",
            "DestCidrIp": "0.0.0.0/0",
            "NicType": "intranet"
          }
        ]
      }
    },
    "Map3EdgeNodeVPC": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": "192.168.0.0/16",
        "VpcName": "map3-edge-node-vpc"
      }
    },
    "InstallGroupWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "DependsOn": "Map3EdgeNode",
      "Properties": {
        "Handle": {
          "Ref": "InstallConditionHandle"
        },
        "Timeout": 1200,
        "Count": 1
      }
    },
    "InstallConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    }
  },
  "Outputs": {
    "ECSInstanceId": {
      "Value": {
        "Fn::GetAtt": ["Map3EdgeNode", "InstanceId"]
      }
    },
    "PublicIp": {
      "Value": {
        "Fn::GetAtt": ["Map3EdgeNode", "PublicIp"]
      }
    }
  }
}
