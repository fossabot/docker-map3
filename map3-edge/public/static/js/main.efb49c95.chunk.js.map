{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","viewport","latitude","longitude","zoom","width","height","style","nodeIp","_onViewportChange","_this","setState","_updateCurrentLocation","navigator","geolocation","getCurrentPosition","position","Object","objectSpread","coords","error","console","log","_this2","this","fetch","then","res","json","nodeInfo","nodePublicIp","res2","sources","composite","tiles","push","tileServer","catch","e","warn","_this$state","react_default","a","createElement","className","esm","assign","mapStyle","onViewportChange","attributionControl","mapboxApiAccessToken","paddingLeft","flex","href","concat","target","Dashboard_default","marginLeft","Paper_default","elevation","square","Typography_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iQAmGeA,6MAtFbC,MAAQ,CACNC,SAAU,CACRC,SAAU,SACVC,UAAW,WACXC,KAAM,GACNC,MAAO,QACPC,OAAQ,SAEVC,MAAO,GACPC,OAAQ,MA4BVC,kBAAoB,SAAAR,GAClBA,EAAQ,MAAY,QACpBA,EAAQ,OAAa,QACrBS,EAAKC,SAAS,CAACV,gBAGjBW,uBAAyB,WACvBC,UAAUC,YAAYC,mBAAmB,SAAAC,GACvC,IAAMf,EAAQgB,OAAAC,EAAA,EAAAD,CAAA,GAAOP,EAAKV,MAAMC,UAChCA,EAASE,UAAYa,EAASG,OAAOhB,UACrCF,EAASC,SAAWc,EAASG,OAAOjB,SACpCQ,EAAKC,SAAS,CAACV,cACd,SAACmB,GACFC,QAAQC,IAAIF,0FArCK,IAAAG,EAAAC,KACnBC,MAnBkB,kBAoBfC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAEJ,OADAN,EAAKZ,SAAS,CAACH,OAAQqB,EAASC,eACzBL,MAxBO,qBAyBXC,KAAK,SAAAK,GAAI,OAAIA,EAAKH,SAClBF,KAAK,SAAAnB,GAEJ,OADAA,EAAMyB,QAAQC,UAAUC,MAAMC,KAAKN,EAASO,YACrC7B,MAGZmB,KAAK,SAAAnB,GACJgB,EAAKZ,SAAS,CAACJ,YAEhB8B,MAAM,SAAAC,GACLjB,QAAQkB,KAAKD,iDAKjBd,KAAKZ,0DAoBE,IAAA4B,EAC2BhB,KAAKxB,MAAhCC,EADAuC,EACAvC,SAAUM,EADViC,EACUjC,MAAOC,EADjBgC,EACiBhC,OAExB,OACEiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD5B,OAAA6B,OAAA,GACM7C,EADN,CAEE8C,SAAUxC,EACVyC,iBAAkBxB,KAAKf,kBACvBwC,oBAAoB,EACpBC,qBApEW,oGAuEbT,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,OAAKpC,MAAO,CAAC4C,YAAa,QAA1B,SAAyC3C,GACzCiC,EAAAC,EAAAC,cAAA,OAAKpC,MAAO,CAAC6C,KAAM,KACnBX,EAAAC,EAAAC,cAAA,KAAGU,KAAI,UAAAC,OAAY9C,EAAZ,SAA2B+C,OAAO,SAASX,UAAU,aAC1DH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,kBACAD,EAAAC,EAAAC,cAAA,OAAKpC,MAAO,CAACkD,WAAY,QAAzB,eAGJhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAOiB,UAAW,EAAGf,UAAU,YAAYgB,QAAM,GAC/CnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,qJA/EMoB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmB3D,WACrBA,UAAU4D,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.efb49c95.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport MapGL from 'react-map-gl';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Dashboard from '@material-ui/icons/Dashboard';\n\nconst MAP_STYLE_URL = 'styles/basic.json'\nconst NODE_INFO_URL = 'node-info.json'\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiaHlwZXJpb25sYWIiLCJhIjoiY2pwYXNvbTJiMm90ZjNxcDd3Y3kxNGtmYiJ9.s-np__x-B_MgHvp06NxV5w'\n\n\nclass App extends Component {\n  state = {\n    viewport: {\n      latitude: 22.305110,\n      longitude: 114.188488,\n      zoom: 12,\n      width: \"100vw\",\n      height: \"100vh\",\n    },\n    style: '',\n    nodeIp: ''\n  }\n\n\n  componentWillMount() {\n    fetch(NODE_INFO_URL)\n      .then(res => res.json())\n      .then(nodeInfo => {\n        this.setState({nodeIp: nodeInfo.nodePublicIp})\n        return fetch(MAP_STYLE_URL)\n          .then(res2 => res2.json())\n          .then(style => {\n            style.sources.composite.tiles.push(nodeInfo.tileServer)\n            return style\n          })\n      })\n      .then(style => {\n        this.setState({style})\n      })\n      .catch(e => {\n        console.warn(e)\n      })\n  }\n\n  componentDidMount() {\n    this._updateCurrentLocation()\n  }\n\n  _onViewportChange = viewport => {\n    viewport['width'] = \"100vw\"\n    viewport['height'] = \"100vh\"\n    this.setState({viewport})\n  }\n\n  _updateCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const viewport = {...this.state.viewport}\n      viewport.longitude = position.coords.longitude\n      viewport.latitude = position.coords.latitude\n      this.setState({viewport})\n    }, (error) => {\n      console.log(error)\n    })\n  }\n\n  render() {\n    const {viewport, style, nodeIp} = this.state\n\n    return (\n      <div className=\"App\">\n        <MapGL\n          {...viewport}\n          mapStyle={style}\n          onViewportChange={this._onViewportChange}\n          attributionControl={false}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        >\n        </MapGL>\n        <div className={'App-Container'}>\n          <div className=\"App-Top-Nav\">\n            <span className=\"circle\"/>\n            <div style={{paddingLeft: '8px'}}>node: {nodeIp}</div>\n            <div style={{flex: 1}}/>\n            <a href={`http://${nodeIp}:3000`} target='_blank' className='dashboard'>\n              <Dashboard>Dashboard</Dashboard>\n              <div style={{marginLeft: '8px'}}>DASHBOARD</div>\n            </a>\n          </div>\n          <Paper elevation={1} className=\"App-Guide\" square>\n            <Typography>Tips: This map is to test if your service node works normally. If you see this map, it means your node is providing map services. </Typography>\n          </Paper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}